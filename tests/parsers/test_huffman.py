import io
from romsection.parsers import huffman


EXPECTED = b"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\xa0\x0b\x0c\x0d\x0e\x0f\
\x00\x10\x20\x30\x40\x50\x60\x70\x80\x90\xa0\xb0\xc0\xd0\xe0\xf0"


def test_huffman_4bits():
    data = b"\x24\x20\x00\x00\x0f\x80\x00\x00\x00\x01\x01\x02\x02\x43\
\xc3\xc4\xc4\xc5\xc5\xc6\xc6\x01\x06\x07\x04\x05\x0a\x0b\x08\x09\x0e\x0f\
\x0c\x0d\x02\x03\x4d\x52\xc7\x3d\xa5\x5c\x56\x04\x43\x86\x6d\x5a\xd0\x24\
\x75\xdc\x55\xd4\x65\x45\x00\x64\xd8\xa6"
    stream = io.BytesIO(data)
    result = huffman.decompress(stream)
    assert result == EXPECTED


def test_huffman_8bits():
    data = b"\x28\x20\x00\x00\x1d\x00\x00\x01\x01\x02\x02\x03\x03\x04\x04\
\x05\x05\xc6\x06\x07\xc7\xc8\xc8\xc9\xc9\xca\xca\xcb\xcb\xcc\x00\xa0\xcb\
\xcc\xcc\xcd\x0c\x0d\x09\x0b\x10\x20\x0e\x0f\x03\x04\x01\x02\x07\x08\x05\
\x06\xe0\xf0\xc0\xd0\x50\x60\x30\x40\x90\xb0\x70\x80\x73\x09\x2d\xa5\xc0\
\x58\xd1\xd8\x5d\x88\x1e\x13\xf9\xf7\x19\x6f\x10\xe1\x94\x7d"
    stream = io.BytesIO(data)
    result = huffman.decompress(stream)
    assert result == EXPECTED


def test_huffman_8bits_weird():
    """This tree is far too big and create overflow"""
    data = b"\x28\x18\x01\x00\
\x11\x40\x80\x00\xf0\x80\xff\x00\x00\xc1\xc1\x82\x80\xe0\x10\x7f\
\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\
\x00\xf6\x00\x00\
\x49\x94\xd5\x62\x24\x49\x94\x24\x92\x24\x89\x92\x4a\x92\x24\x51\
\x44\x49\x92\x24\x92\x28\x49\x92\x49\x12\x25\x49\x24\x49\xa2\x24\
\x92\x24\x49\x94\x51\x92\x24\x89\x24\x4a\x92\x24\x92\x44\x49\x92\
\x49\x92\x28\x49\x24\x49\x12\x25\x00\x00\xfc\xb9"
    stream = io.BytesIO(data)
    result = huffman.decompress(stream)
    assert len(result) == 280
    assert result[:8] == b"\x10\x00\t\x00\x7f\xff\xf0\x00"
    assert result[-8:] == b"\x00\xf0\x00\x80\xe0\x00\x00\x00"
